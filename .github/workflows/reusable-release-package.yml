name: Release package

on:
  workflow_call:
    inputs:
      # The GitHub App that has been given permission to push to repo.
      app-id:
        type: "string"
        required: true
    outputs:
      # Whether the release was successful.
      has_released:
        value: ${{ jobs.release.outputs.has_released }}
        description: "Whether the release was successful."
    secrets:
      # Needs read and write contents permission to push to main.
      update-version-gh-token:
        required: true

jobs:
  release:
    name: "Update project's version and changelog, then make GitHub release"
    if: "!startsWith(github.event.head_commit.message, 'build(version): ')"
    runs-on: ubuntu-latest
    outputs:
      has_released: ${{ steps.set-release-env.outputs.has_released }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: app-token
        with:
          app-id: ${{ inputs.app-id }}
          private-key: ${{ secrets.update-version-gh-token }}

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Only need the last commit from the repo.
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Set User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - id: cz
        name: Update version and changelog
        uses: commitizen-tools/commitizen-action@5b0848cd060263e24602d1eba03710e056ef7711 # 0.24.0
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          changelog: true

      - name: Create GitHub release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          generate_release_notes: true
          # env variable containing the new version, created by the Commitizen action
          tag_name : ${{ env.REVISION }}

      # This workflow and the publish workflows are based on:
      # - https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
      # - https://www.andrlik.org/dispatches/til-use-uv-for-build-and-publish-github-actions/
      # - https://github.com/astral-sh/trusted-publishing-examples
      - name: Set up uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build distributions
        # Builds dists from source and stores them in the dist/ directory.
        run: uv build

      - name: Upload built distributions
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-dists
          path: dist/

      # Need to output this to tell the next job that a release was made.
      - id: set-release-env
        name: Set release variable
        run: echo "has_released=true" >> "$GITHUB_OUTPUT"

